name: "Deploy with Diginext"
description: "Run actions to deploy apps to Diginext platform or any Kubernetes clusters."

inputs:
  dx_version:
    description: "Specific version of Diginext CLI"
    default: latest
  api_key:
    description: "Diginext API Access Token (key)"
    required: true
  deploy_env:
    description: "Target deploy environment"
    default: dev
  workspace_url:
    description: "Custom URL (eg. Self-hosted workspace)"
    default: https://app.dxup.dev
  project:
    description: "Slug of Diginext project"
    default: ""
  cluster:
    description: "Slug of Diginext cluster or any registered Kubernetes clusters on Diginext"
    required: true
  registry:
    description: "Slug of Diginext container registry or any registered Kubernetes container registries on Diginext"
    required: true
  port:
    description: "Port to expose the app"
    default: "3000"
  debug:
    description: "Toggle DEBUG mode (Caution: sensitive information could be exposed during debug mude)"
    default: ""
  detach:
    description: "Run deploy command in detach mode (will not wait for deploy process to finish)"
    default: ""
  roll_out:
    description: "When deploy to `prod` it will skip `prerelelease` environment and roll out, default is `false`."
    default: ""

# outputs:
#   random-number:
#     description: "Random number"
#     value: ${{ steps.random-number-generator.outputs.random-number }}

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v3
      with:
        node-version: "lts/*"

    - run: npm i @topgroup/diginext@${{ inputs.dx_version }} --location=global
      shell: bash

    - run: dx -v
      shell: bash

    - run: dx login ${{ inputs.workspace_url }} --api-token="${{ inputs.api_key }}"
      shell: bash

    - run: dx info
      shell: bash

    # - if: "${{ inputs.project != '' }}"
    #   run: dx up --project=${{ inputs.project }} --env=${{ inputs.deploy_env }} --cluster="${{ inputs.cluster }}" --registry="${{ inputs.registry }}" --port=${{ inputs.port }} --ssl --domain --tail
    #   shell: bash

    # - if: "${{ inputs.project == '' }}"
    #   run: dx up --env=${{ inputs.deploy_env }} --cluster="${{ inputs.cluster }}" --registry="${{ inputs.registry }}" --port=${{ inputs.port }} --ssl --domain --tail
    #   shell: bash

    - run: |
        if [ -n "${{ inputs.debug }}" ] && [ ! -z "${{ inputs.debug }}" ]; then
          debug_flag=" --debug"
        else
          debug_flag=""
        fi

        if [ -n "${{ inputs.roll_out }}" ] && [ ! -z "${{ inputs.roll_out }}" ]; then
          rollout_flag=" --rollout"
        else
          rollout_flag=""
        fi

        if [ -n "${{ inputs.detach }}" ] && [ ! -z "${{ inputs.detach }}" ]; then
          tail_flag=" --tail"
        else
          tail_flag=""
        fi

        echo "[GITHUB_ACTION] API_KEY: ${{ inputs.api_key }}"
        echo "[GITHUB_ACTION] DEPLOY_ENV: ${{ inputs.deploy_env }}"
        echo "[GITHUB_ACTION] CLUSTER: ${{ inputs.cluster }}"
        echo "[GITHUB_ACTION] REGISTRY: ${{ inputs.registry }}"
        echo "[GITHUB_ACTION] PORT: ${{ inputs.port }}"
        echo "[GITHUB_ACTION] SSL: ${{ inputs.ssl }}"
        echo "[GITHUB_ACTION] DOMAIN: ${{ inputs.domain }}"
        echo "[GITHUB_ACTION] PROJECT: ${{ inputs.project }}"
        echo "[GITHUB_ACTION] WORKSPACE_URL: ${{ inputs.workspace_url }}"
        echo "[GITHUB_ACTION] DEBUG: ${{ inputs.debug }}"
        echo "[GITHUB_ACTION] DETACH: ${{ inputs.detach }}"
        echo "[GITHUB_ACTION] ROLL_OUT: ${{ inputs.roll_out }}"

        FLAGS="--api-token="${{ inputs.api_key }}" --env=${{ inputs.deploy_env }} --cluster="${{ inputs.cluster }}" --registry="${{ inputs.registry }}" --port=${{ inputs.port }}${debug_flag}${rollout_flag} --ssl --domain${tail_flag}"
        echo "dx up $FLAGS"

        dx up $FLAGS
      shell: bash

    # - run: echo "random-number=$(echo $RANDOM)" >> $GITHUB_OUTPUT
    #   id: random-number-generator
    #   shell: bash

    # - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
    #   shell: bash

    # - run: goodbye.sh
    #   shell: bash
